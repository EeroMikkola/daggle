#ifndef DAGGLE_API_H
#define DAGGLE_API_H

#define DAGGLE_VERSION_MAJOR @MAJOR_VERSION@
#define DAGGLE_VERSION_MINOR @MINOR_VERSION@
#define DAGGLE_VERSION_PATCH @PATCH_VERSION@
#define DAGGLE_ABI_VERSION @ABI_VERSION@

#define DAGGLE_VERSION_STRING "@MAJOR_VERSION@.@MINOR_VERSION@.@PATCH_VERSION@"
#define DAGGLE_VERSION                                                         \
	((DAGGLE_VERSION_MAJOR << 16) | (DAGGLE_VERSION_MINOR << 8)                \
		| DAGGLE_VERSION_PATCH)

#ifdef _WIN32
#ifdef DAGGLE_EXPORTS
#define DAGGLE_API __declspec(dllexport)
#else
#define DAGGLE_API __declspec(dllimport)
#endif
#else
#define DAGGLE_API __attribute__((visibility("default")))
#endif

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/** @brief A handle to a Daggle instance. */
typedef void* daggle_instance_h;

/** @brief A handle to a graph. */
typedef void* daggle_graph_h;

/** @brief A handle to a node. */
typedef void* daggle_node_h;

/** @brief A handle to a port. */
typedef void* daggle_port_h;

/** @brief A handle to a task. */
typedef void* daggle_task_h;

typedef enum daggle_error_code_e {
	DAGGLE_SUCCESS = 0,
	DAGGLE_ERROR_UNKNOWN,
	DAGGLE_ERROR_NULL_PARAMETER,
	DAGGLE_ERROR_NULL_OUTPUT_PARAMETER,
	DAGGLE_ERROR_PARSE,
	DAGGLE_ERROR_MISSING_DEPENDENCY,
	DAGGLE_ERROR_MEMORY_ALLOCATION,
	DAGGLE_ERROR_INCORRECT_PORT_VARIANT,
	DAGGLE_ERROR_OBJECT_LOCKED,
} daggle_error_code_t;

/** @brief Port variant enum, determines the properties of a port. */
typedef enum daggle_port_variant_e {
	DAGGLE_PORT_INPUT,
	DAGGLE_PORT_OUTPUT,
	DAGGLE_PORT_PARAMETER,
} daggle_port_variant_t;

typedef enum daggle_input_behavior_e {
	DAGGLE_INPUT_BEHAVIOR_REFERENCE, // Immutable reference, no ownership
	DAGGLE_INPUT_BEHAVIOR_ACQUIRE, // Caller acquires ownership, mutable
} daggle_input_behavior_t;

// Note: data got via reference input ports remain valid for the node and its subtasks.

// TODO: Reusable tasks to avoid allocations.

// ### PLUGIN DEFINITIONS

typedef struct daggle_plugin_interface_s {
	void (*init)(daggle_instance_h instance, void* context);
	void (*shutdown)(daggle_instance_h instance, void* context);

	void* context;
} daggle_plugin_interface_t;

/** @brief Struct containing info about a plugin and function to create an
 * instance of it */
typedef struct daggle_plugin_source_s {
	/** @brief The ID of the plugin, null terminated */
	char* id;

	/** @brief List of dependency plugin IDs, comma-separated null terminated */
	char* dependencies;

	/** @brief The DAGGLE_ABI_VERSION the plugin was built for */
	uint32_t abi;

	/** @brief Optional data, which can be used for more complex loading behavior */
	void* context;

	/** 
	 * @brief Function which creates an instance of the plugin
	 * 
	 * @param[in] source pointer to this struct instance
	 * @param[out] out_interface pointer to the daggle_plugin_interface_t where 
	 * to write the loaded plugin instance
	 */
	void (*load)(struct daggle_plugin_source_s* source,
		daggle_plugin_interface_t* out_interface);

	/**
	 * @brief Function which frees the variables of this struct 
	 * 
	 * @param[in] source pointer to this struct instance
	*/
	void (*dispose)(struct daggle_plugin_source_s* source);
} daggle_plugin_source_t;

// ### NODE AND PORT RELATED DEFINITIONS

/** @brief Function pointer which generates data of some type. */
typedef bool (*daggle_default_value_generator_fn)(void** out_data,
	const char** out_data_type);

/**
 * @brief Function pointer which declares the node
 *
 * The implementation of this function may call daggle_node_declare_ functions.
 * In other words, this is when ports, the task and optionally a node context
 * are created.
 */
typedef void (*daggle_node_declare_fn)(daggle_node_h handle);

/** @brief Function pointer which executes the work given to a node. */
typedef void (
	*daggle_node_task_fn)(daggle_task_h task, void* node_task_context);

/** @brief Function pointer which disposes of the node task context. */
typedef void (*daggle_node_task_dispose_fn)(void* node_task_context);

/** @brief Function pointer which frees a node context. */
typedef void (*daggle_node_context_free_fn)(void* node_context);

// ### DATATYPE FUNCTION DEFINITIONS

/** @brief Function pointer which clones data. */
typedef void (*daggle_data_clone_fn)(daggle_instance_h instance,
	const void* data, void** target);

/** @brief Function pointer which destructs and frees data. */
typedef void (*daggle_data_free_fn)(daggle_instance_h instance, void* data);

// TODO: Add support for returning an error code
/**
 * @brief Function pointer which serializes data.
 *
 * The format the data is serialized to does not matter, as long as the
 * deserializer for this datatype uses that same format.
 *
 * The serialized data should be little-endian.
 * */
typedef void (*daggle_data_serialize_fn)(daggle_instance_h instance,
	const void* data, unsigned char** out_buf, uint64_t* out_len);

/**
 * @brief Function pointer which deserializes data.
 *
 * Deserializing an serialized data instance must be equivalent to cloning the
 * original instance.
 * */
typedef void (*daggle_data_deserialize_fn)(daggle_instance_h instance,
	const unsigned char* bin, uint64_t len, void** target);

// ### MISCELLANEOUS FUNCTIONS

/** @brief Get the version of this library. */
DAGGLE_API const char*
daggle_get_version(void);

/** @brief Get the ABI version of this library. */
DAGGLE_API uint32_t
daggle_get_abi(void);

// ### PLUGIN FEATURE REGISTRATION FUNCTIONS

/**
 * @brief Register a node
 *
 * The data type will be accessible within the Daggle instance the provided
 * plugin instance was loaded in.
 *
 * May be called within daggle_plugin_apply_fn or equivalent.
 * */
DAGGLE_API daggle_error_code_t
daggle_plugin_register_node(daggle_instance_h instance, const char* node_type,
	daggle_node_declare_fn declare);

/**
 * @brief Register a data type
 *
 * The data type will be accessible within the Daggle instance the provided
 * plugin instance was loaded in.
 *
 * May be called within daggle_plugin_apply_fn or equivalent.
 * */
DAGGLE_API daggle_error_code_t
daggle_plugin_register_type(daggle_instance_h instance, const char* data_type,
	daggle_data_clone_fn cloner, daggle_data_free_fn freer,
	daggle_data_serialize_fn serializer,
	daggle_data_deserialize_fn deserializer);

// ### INSTANCE FUNCTIONS

/** @brief Create a Daggle instance */
DAGGLE_API daggle_error_code_t
daggle_instance_create(daggle_plugin_source_t** plugins, uint64_t num_plugins,
	daggle_instance_h* out_instance);

/**
 * @brief Free a Daggle instance
 *
 * @note: Must be called only after everything else has been freed.
 * */
DAGGLE_API daggle_error_code_t
daggle_instance_free(daggle_instance_h instance);

// SOURCE

DAGGLE_API daggle_error_code_t
daggle_plugin_source_create_from_file(const char* path,
	daggle_plugin_source_t* out_plugin_source);

// ### DATA SERIALIZATION

DAGGLE_API daggle_error_code_t
daggle_data_clone(daggle_instance_h instance, const char* type, void* data,
	void** out_data);

DAGGLE_API daggle_error_code_t
daggle_data_free(daggle_instance_h instance, const char* data_type, void* data);

DAGGLE_API daggle_error_code_t
daggle_data_deserialize(daggle_instance_h instance, const char* data_type,
	const unsigned char* bin, uint64_t len, void** out_data);

DAGGLE_API daggle_error_code_t
daggle_data_serialize(daggle_instance_h instance, const char* data_type,
	const void* data, unsigned char** out_bin, uint64_t* out_len);

DAGGLE_API daggle_error_code_t
daggle_data_get_type_handlers(daggle_instance_h instance, const char* data_type,
	daggle_data_clone_fn* out_cloner /* nullable */,
	daggle_data_free_fn* out_freer /* nullable */,
	daggle_data_serialize_fn* out_serializer /* nullable */,
	daggle_data_deserialize_fn* out_deserializer /* nullable */
);

// ### GRAPH CREATION
DAGGLE_API daggle_error_code_t
daggle_task_create(daggle_node_task_fn work,
	daggle_node_task_dispose_fn dispose, void* context /* nullable */, char* id,
	daggle_task_h* out_task);

DAGGLE_API daggle_error_code_t
daggle_task_depend(daggle_task_h task, daggle_task_h dependency);

DAGGLE_API daggle_error_code_t
daggle_task_add_subgraph(daggle_task_h task, daggle_task_h* tasks,
	uint64_t num_tasks);

// ### GRAPH EXECUTION

DAGGLE_API daggle_error_code_t
daggle_graph_create(daggle_instance_h instance, daggle_graph_h* out_graph);

DAGGLE_API daggle_error_code_t
daggle_graph_free(daggle_graph_h handle);

DAGGLE_API daggle_error_code_t
daggle_graph_add_node(daggle_graph_h handle, const char* node_type,
	daggle_node_h* out_node);

DAGGLE_API daggle_error_code_t
daggle_graph_remove_node(daggle_graph_h handle, daggle_node_h node);

DAGGLE_API daggle_error_code_t
daggle_graph_get_node_by_index(daggle_graph_h handle, uint64_t index,
	daggle_node_h* out_node);

DAGGLE_API daggle_error_code_t
daggle_graph_deserialize(daggle_instance_h instance, const unsigned char* bin,
	daggle_graph_h* out_graph);

DAGGLE_API daggle_error_code_t
daggle_graph_serialize(daggle_graph_h handle, unsigned char** out_bin,
	uint64_t* out_len);

DAGGLE_API daggle_error_code_t
daggle_graph_taskify(daggle_graph_h graph, daggle_task_h* out_task);

DAGGLE_API daggle_error_code_t
daggle_task_execute(daggle_instance_h instance, daggle_task_h task);

// Shortcut to daggle_graph_taskify + daggle_task_execute
DAGGLE_API daggle_error_code_t
daggle_graph_execute(daggle_instance_h instance, daggle_graph_h graph);

DAGGLE_API daggle_error_code_t
daggle_graph_get_daggle(daggle_graph_h graph, daggle_instance_h* out_daggle);

// ### NODE FUNCTIONS

DAGGLE_API daggle_error_code_t
daggle_node_get_type(daggle_node_h node, const char** out_node_type);

// Returns NULL if not found
DAGGLE_API daggle_error_code_t
daggle_node_get_port_by_name(daggle_node_h node, const char* port,
	daggle_port_h* out_port);

// Returns NULL if out of bounds.
DAGGLE_API daggle_error_code_t
daggle_node_get_port_by_index(daggle_node_h node, uint64_t index,
	daggle_port_h* out_port);

// ### NODE EXTENSIONS

DAGGLE_API daggle_error_code_t
daggle_node_get_daggle(daggle_node_h node, daggle_instance_h* out_daggle);

DAGGLE_API daggle_error_code_t
daggle_node_get_graph(daggle_node_h node, daggle_graph_h* out_graph);

// ### NODE DECLARATION

DAGGLE_API daggle_error_code_t
daggle_node_declare_input(daggle_node_h node, const char* port_name,
	daggle_input_behavior_t input_behavior,
	daggle_default_value_generator_fn default_value_gen);

DAGGLE_API daggle_error_code_t
daggle_node_declare_parameter(daggle_node_h node, const char* port_name,
	daggle_default_value_generator_fn default_value_gen);

DAGGLE_API daggle_error_code_t
daggle_node_declare_output(daggle_node_h node, const char* port_name);

DAGGLE_API daggle_error_code_t
daggle_node_declare_task(daggle_node_h node, daggle_node_task_fn task);

// Declare a context available in the declared task.
// If this is not called, context will implicitly be set to the node handle.
// The value of context is passed to the declared task.
// It is reset when node is redeclared.
// If the destructor is set, context is passed to it.
// It is created in node declaration, and should be considered *immutable*.
// The previous state is not available in declaration, and must always be
// recreated.
DAGGLE_API daggle_error_code_t
daggle_node_declare_context(daggle_node_h node, void* context /* nullable */,
	daggle_node_context_free_fn destructor /* nullable */
);

// ### EDGE MANAGEMENT

DAGGLE_API daggle_error_code_t
daggle_port_connect(daggle_port_h port_a, daggle_port_h port_b);

DAGGLE_API daggle_error_code_t
daggle_port_disconnect(daggle_port_h port);

// Returns NULL if out of bounds.
DAGGLE_API daggle_error_code_t
daggle_port_get_connected_port_by_index(daggle_port_h port, uint64_t index,
	daggle_port_h* out_port);

// ### PORT FUCNTIONS

DAGGLE_API daggle_error_code_t
daggle_port_get_name(const daggle_port_h port, const char** out_name);

DAGGLE_API daggle_error_code_t
daggle_port_get_node(const daggle_port_h port, daggle_node_h* out_node);

DAGGLE_API daggle_error_code_t
daggle_port_get_variant(const daggle_port_h port,
	daggle_port_variant_t* out_variant);

DAGGLE_API daggle_error_code_t
daggle_port_get_value_data_type(const daggle_port_h port,
	const char** out_data_type);

DAGGLE_API daggle_error_code_t
daggle_port_get_value(const daggle_port_h port, void** out_data);

DAGGLE_API daggle_error_code_t
daggle_port_set_value(const daggle_port_h port, const char* data_type,
	void* data);

#ifdef __cplusplus
}
#endif
#endif
